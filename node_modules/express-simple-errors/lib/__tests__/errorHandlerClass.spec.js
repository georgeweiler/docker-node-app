'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('ErrorHandler Class', function () {
  var errors = new _index2.default();
  var defaultHandler = errors.handlers.get('Default').toString();
  it('returns default class', function () {
    expect(_typeof(errors.setHandler)).toBe('function');
    expect(_typeof(errors.unsetHandler)).toBe('function');
    expect(_typeof(errors.handleNotFound)).toBe('function');
    expect(_typeof(errors.handleError)).toBe('function');
    expect(_typeof(errors.sendResponse)).toBe('function');
    expect(_typeof(errors.middleware)).toBe('function');
    expect(defaultHandler).toBeDefined();
    expect(errors).toMatchSnapshot();
  });

  it('allows turning off stack trace from response.', function () {
    var errorsStack = new _index2.default({ stackTrace: false });
    expect(function () {
      return new _index2.default({ stackTrace: 123 });
    }).toThrow();
    expect(function () {
      return new _index2.default({ stackTrace: '123' });
    }).toThrow();
    expect(function () {
      return new _index2.default({ stackTrace: function stackTrace() {} });
    }).toThrow();
    expect(function () {
      return new _index2.default({ stackTrace: [] });
    }).toThrow();
    expect(function () {
      return new _index2.default({ stackTrace: {} });
    }).toThrow();
    expect(errorsStack).toMatchSnapshot();
  });

  it('allows Default handler to be changed', function () {
    errors.setHandler('Default', function () {});
    expect(errors.handlers.get('Default').toString()).toEqual('function () {}');
  });

  it('restores Default handler when unset', function () {
    errors.unsetHandler('Default');
    expect(errors.handlers.get('Default').toString()).toEqual(defaultHandler);
  });

  it('allows custom handler creation', function () {
    expect(function () {
      return errors.setHandler();
    }).toThrow();
    expect(function () {
      return errors.setHandler('Test');
    }).toThrow();
    expect(function () {
      return errors.setHandler('Test', true);
    }).toThrow();
    expect(function () {
      return errors.setHandler('Test', {});
    }).toThrow();
    expect(function () {
      return errors.setHandler('Test', []);
    }).toThrow();
    expect(function () {
      return errors.setHandler('Test', 123);
    }).toThrow();
    expect(function () {
      return errors.setHandler('Test', '123');
    }).toThrow();
    errors.setHandler('Test', function () {});
    expect(errors.handlers).toMatchSnapshot();
  });

  it('allows custom handler deletion', function () {
    expect(function () {
      return errors.unsetHandler();
    }).toThrow();
    errors.unsetHandler('Test');
    expect(errors.handlers).toMatchSnapshot();
  });
});