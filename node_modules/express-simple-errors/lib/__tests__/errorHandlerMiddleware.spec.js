'use strict';

var _supertest = require('supertest');

var _supertest2 = _interopRequireDefault(_supertest);

var _app = require('./app');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var contentType = 'application/json; charset=utf-8';

describe('ErrorHandler Middleware', function () {
  it('catches 404 errors', function (done) {
    (0, _supertest2.default)(_app.app).get('/doesnotexist').expect(404).expect('Content-Type', contentType).end(function (err, res) {
      var body = res.body;
      expect(err).toBeNull();
      expect(body.status).toEqual('Error');
      expect(body.message).toEqual('Not Found');
      expect(body.code).toEqual(404);
      expect(body.stackTrace).toContain('Error: Not Found');
      done();
    });
  });

  it('catches errors from routes', function (done) {
    (0, _supertest2.default)(_app.app).get('/badrequest').expect(400).expect('Content-Type', contentType).end(function (err, res) {
      var body = res.body;
      expect(err).toBeNull();
      expect(body.status).toEqual('Error');
      expect(body.message).toEqual('Bad Request');
      expect(body.code).toEqual(400);
      expect(body.stackTrace).toContain('Error: Bad Request');
      done();
    });
  });

  it('catches 500 errors', function (done) {
    (0, _supertest2.default)(_app.app).get('/servererror').expect(500).expect('Content-Type', contentType).end(function (err, res) {
      var body = res.body;
      expect(err).toBeNull();
      expect(body.status).toEqual('Error');
      expect(body.message).toEqual('Internal Server Error');
      expect(body.code).toEqual(500);
      expect(body.stackTrace).toContain('Error: Internal Server Error');
      done();
    });
  });

  it('removes stacktrace from response if production mode', function (done) {
    (0, _supertest2.default)(_app.appProd).get('/badrequest').expect(400).expect('Content-Type', contentType).end(function (err, res) {
      var body = res.body;
      expect(err).toBeNull();
      expect(body.status).toEqual('Error');
      expect(body.message).toEqual('Bad Request');
      expect(body.code).toEqual(400);
      expect(body.stackTrace).toBeUndefined();
      done();
    });
  });
});