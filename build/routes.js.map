{"version":3,"sources":["../src/routes.js"],"names":["router","express","Router","route","get","getAllTodos","returnResponse","req","res","next","send"],"mappings":";;;;;;kBAOe,YAAa;AAC1B,MAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,SAAOG,KAAP,CAAa,GAAb,EACGC,GADH,CACOC,WADP,EACoBC,cADpB;AAEE;AACA;;AAEJ;AACA;AACA;AACA;AACA;;AAEE,iBAAeD,WAAf,CAA2BE,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AACzC;AACA;AACAA;AACD;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEE,WAASH,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkC;AAChC;AACA;AACA;AACAA,QAAIE,IAAJ,CAAS,OAAT;AACD;;AAED,SAAOV,MAAP;AACD,C;;AArFD;;;;AACA;;AACA","file":"routes.js","sourcesContent":["import express from 'express';\nimport { validate } from 'isvalid';\nimport { errors } from 'express-simple-errors';\n// import transformResponse, { schema } from './model';\n// import db from '../db';\n// const todoTable = 'todos';\n\nexport default function ()  {\n  const router = express.Router();\n\n  router.route('/')\n    .get(getAllTodos, returnResponse)\n    // .post(validate.body(schema), createTodo, returnResponse)\n    // .delete(clearTodos, returnResponse);\n\n//   router.route('/:id')\n//     .all(getOneTodo)\n//     .get(returnResponse)\n//     .patch(patchTodo, returnResponse)\n//     .delete(deleteTodo, returnResponse);\n\n  async function getAllTodos(req, res, next) {\n    // res.locals.todos = await db.all(todoTable)\n    // .catch((err) => next(err));\n    next();\n  }\n\n//   async function clearTodos(req, res, next) {\n//     const rows = await db.clear(todoTable)\n//     .catch((err) => next(err));\n//     res.locals.todos = rows;\n//     res.status(204);\n//     next();\n//   }\n\n//   async function createTodo(req, res, next) {\n//     if (req.body.order) {\n//       req.body.position = req.body.order;\n//       delete req.body.order;\n//     }\n//     const todo = await db.create(todoTable, req.body)\n//     .catch((err) => next(err));\n//     res.locals.todo = todo[0];\n//     res.status(201);\n//     next();\n//   }\n\n//   async function getOneTodo(req, res, next) {\n//     const todo = await db.getById('todos', req.params.id)\n//     .catch((err) => next(err));\n//     res.locals.todo = todo && todo[0];\n//     if (!res.locals.todo) {\n//       return next(new errors.NotFound('This todo does not exist'));\n//     }\n//     next();\n//   }\n\n//   async function patchTodo(req, res, next) {\n//     const todo = Object.assign({}, res.locals.todo[0], req.body);\n//     if (todo.order) {\n//       todo.position = todo.order;\n//       delete todo.order;\n//     }\n\n//     const updatedTodo = await db.update(todoTable, req.params.id, todo)\n//     .catch((err) => next(err));\n//     res.locals.todo = updatedTodo[0];\n//     next();\n//   }\n\n//   async function deleteTodo(req, res, next) {\n//     res.locals.todo = await db.deleteById(todoTable, req.params.id)\n//     .catch((err) => next(err));\n//     res.status(204);\n//     next();\n//   }\n\n  function returnResponse(req, res) {\n    // handle no responses here\n    // res.locals.baseUrl = `${req.protocol}://${req.get('host')}`;\n    // res.json(transformResponse(res.locals));\n    res.send(\"hello\");\n  }\n\n  return router;\n}\n"]}